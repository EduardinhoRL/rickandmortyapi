{"version":3,"sources":["img/logo.png","components/Header.jsx","components/Personaje.jsx","components/Buttons.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","src","logo","alt","Personaje","personaje","id","name","species","status","image","title","Buttons","setId","handleClick","e","target","onClick","App","useState","setPersonaje","useEffect","fetch","then","respuesta","json","datos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iGAAAA,EAAOC,QAAU,IAA0B,kC,sLCa5BC,EAVA,WACX,OACI,4BAAQC,UAAU,UACd,yBACIC,IAAKC,IAAMC,IAAI,OCmBhBC,EAxBG,SAAC,GAAiB,IAAhBC,EAAe,EAAfA,UAETC,EAAoCD,EAApCC,GAAIC,EAAgCF,EAAhCE,KAAMC,EAA0BH,EAA1BG,QAASC,EAAiBJ,EAAjBI,OAAQC,EAASL,EAATK,MAElC,OAEI,yBAAKV,UAAU,aACX,yBAAKA,UAAU,QACX,0BAAMA,UAAU,MAAMM,GACtB,8BAAOC,GACP,8BAAOC,GACP,8BAAOC,GACP,yBACIR,IAAKS,EACLP,IAAI,qBACJQ,MAAOJ,KAGf,0BAAMP,UAAU,kBAAmBO,KCkBhCK,EApCC,SAAC,GAAiB,IAAhBN,EAAe,EAAfA,GAAIO,EAAW,EAAXA,MAIZC,EAAc,SAAAC,GACK,SAAlBA,EAAEC,OAAOT,KAEJM,EALA,MAIDP,EACO,EAEAA,EAAG,GAEU,SAAlBS,EAAEC,OAAOT,MAEVM,EADM,IAAPP,EAVC,IAaMA,EAAG,IAKrB,OACI,kBAAC,WAAD,KACI,4BACIN,UAAU,UACVO,KAAK,OACLU,QAASH,GACZ,uBAAGd,UAAU,wBACd,4BACIA,UAAU,UACVO,KAAK,OACLU,QAASH,GACZ,uBAAGd,UAAU,yBCFXkB,MA1Bf,WAAgB,IAAD,EAEOC,mBAAS,GAFhB,mBAENb,EAFM,KAEFO,EAFE,OAGqBM,mBAAS,IAH9B,mBAGNd,EAHM,KAGKe,EAHL,KAWb,OANAC,qBAAU,WACNC,MAAM,6CAAD,OAA8ChB,IAClDiB,MAAK,SAACC,GAAD,OAAeA,EAAUC,UAC9BF,MAAK,SAACG,GAAD,OAAWN,EAAaM,QAC/B,CAACpB,IAGF,kBAAC,WAAD,KACI,kBAAC,EAAD,MACA,kBAAC,EAAD,CACED,UAAWA,EACXC,GAAIA,IAEN,kBAAC,EAAD,CACEO,MAAOA,EACPP,GAAIA,MCbMqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6678f843.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.4761d244.png\";","import React from 'react'\r\nimport logo from '../img/logo.png'\r\n\r\nconst Header = () => {\r\n    return ( \r\n        <header className=\"header\">\r\n            <img \r\n                src={logo} alt=\"\"\r\n                />\r\n        </header>\r\n     );\r\n}\r\n \r\nexport default Header;","import React from 'react'\r\n\r\nconst Personaje = ({personaje}) => {\r\n\r\n    const {id, name, species, status, image} = personaje\r\n\r\n    return ( \r\n\r\n        <div className=\"container\">\r\n            <div className=\"card\">\r\n                <span className=\"id\">{id}</span>\r\n                <span>{name}</span>\r\n                <span>{species}</span>\r\n                <span>{status}</span>\r\n                <img \r\n                    src={image}\r\n                    alt=\"rick and morty api\"\r\n                    title={name}\r\n                />\r\n            </div>\r\n            <span className=\"backgroundName\" >{name}</span>\r\n        </div>\r\n\r\n     );\r\n}\r\n \r\nexport default Personaje;","import React, {Fragment} from 'react';\r\n\r\nconst Buttons = ({id, setId}) => {\r\n\r\n    const top = 591;\r\n\r\n    const handleClick = e => {\r\n        if(e.target.name === 'more'){\r\n            if(id === top){\r\n                setId(1)\r\n            }else {\r\n                setId(id+1)\r\n            }\r\n        }else if(e.target.name === 'less') {\r\n            if(id === 1) {\r\n                setId(top)\r\n            }else {\r\n                setId(id-1)\r\n            }\r\n        }\r\n    }\r\n\r\n    return ( \r\n        <Fragment>\r\n            <button  \r\n                className=\"btnMore\"\r\n                name=\"more\"\r\n                onClick={handleClick}\r\n            ><i className=\"fas fa-arrow-right\"></i></button>\r\n            <button  \r\n                className=\"btnLess\"\r\n                name=\"less\"\r\n                onClick={handleClick}\r\n            ><i className=\"fas fa-arrow-left\"></i></button>\r\n        </Fragment>\r\n     );\r\n}\r\n \r\nexport default Buttons;","import React, {Fragment, useEffect, useState} from 'react';\nimport Header from './components/Header'\nimport Personaje from './components/Personaje'\nimport Buttons from './components/Buttons'\n\nfunction App() {\n\n  const [id, setId] = useState(1)\n  const [personaje, setPersonaje] = useState({});\n\n  useEffect(() => {\n      fetch(`https://rickandmortyapi.com/api/character/${id}`)\n      .then((respuesta) => respuesta.json())\n      .then((datos) => setPersonaje(datos))\n  }, [id])\n\n  return (\n    <Fragment>\n        <Header />\n        <Personaje \n          personaje={personaje}\n          id={id}\n        />\n        <Buttons \n          setId={setId}\n          id={id}\n        />\n    </Fragment>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './product-sans/style.css'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}